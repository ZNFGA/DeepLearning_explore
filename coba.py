# -*- coding: utf-8 -*-
"""Coba.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ye3tM3l0YzbLv22E_IYtENnl_nEqkNA0
"""

# =============================================================
# SEL 1: INSTALL DEPENDENSI
# =============================================================
!pip install torch torchvision matplotlib pandas scikit-learn pillow

# =============================================================
# SEL 2: IMPORT & SET SEED
# =============================================================
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, Dataset, Subset
from sklearn.model_selection import train_test_split
import pandas as pd
from PIL import Image
import numpy as np
import random
import matplotlib.pyplot as plt

# Set seed for reproducibility
def set_seed(seed=42):
    torch.manual_seed(seed)
    np.random.seed(seed)
    random.seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.backends.cudnn.benchmark = False

set_seed()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"‚úÖ Using device: {device}")

# =============================================================
# SEL 3: MOUNT DRIVE & SET PATH
# =============================================================
from google.colab import drive
drive.mount("/content/drive")

BASE_PATH = "/content/drive/MyDrive/at least I am try/IF25-4041-dataset"
TRAIN_IMG_DIR = os.path.join(BASE_PATH, "train")
TRAIN_CSV_PATH = os.path.join(BASE_PATH, "train.csv")

print("üìÅ Train images:", TRAIN_IMG_DIR)
print("üìÑ Train CSV   :", TRAIN_CSV_PATH)

# =============================================================
# SEL 4: CUSTOM DATASET
# =============================================================
class IndonesianFoodDataset(Dataset):
    def __init__(self, csv_file, img_dir, transform=None):
        self.df = pd.read_csv(csv_file)
        self.img_dir = img_dir
        self.transform = transform
        self.labels = sorted(self.df['label'].unique())
        self.label_to_idx = {label: idx for idx, label in enumerate(self.labels)}

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        row = self.df.iloc[idx]
        img_path = os.path.join(self.img_dir, row['filename'])
        image = Image.open(img_path).convert("RGB")
        label = self.label_to_idx[row['label']]
        if self.transform:
            image = self.transform(image)
        return image, label

# Transformasi MINIMAL (tanpa augmentasi)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Split acak sederhana (80:20)
indices = list(range(len(full_dataset)))
split = int(0.8 * len(indices))
train_idx, val_idx = indices[:split], indices[split:]

train_dataset = Subset(full_dataset, train_idx)
val_dataset = Subset(full_dataset, val_idx)
train_dataset.dataset.transform = transform
val_dataset.dataset.transform = transform

# DataLoader tanpa num_workers
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=0)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False, num_workers=0)

# =============================================================
# SEL 6: MODEL RESNET-34 DENGAN RESIDUAL CONNECTION
# =============================================================
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.downsample = downsample

    def forward(self, x):
        identity = x
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        if self.downsample is not None:
            identity = self.downsample(identity)
        # ‚úÖ RESIDUAL CONNECTION: tambahkan input asli ke output blok
        out += identity
        return F.relu(out)


class ResNet34(nn.Module):
    def __init__(self, num_classes=5):
        super(ResNet34, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.stage1 = self._make_stage(64, 64, 3, stride=1)
        self.stage2 = self._make_stage(64, 128, 4, stride=2)
        self.stage3 = self._make_stage(128, 256, 6, stride=2)
        self.stage4 = self._make_stage(256, 512, 3, stride=2)

        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)
        self._initialize_weights()

    def _make_stage(self, in_channels, out_channels, num_blocks, stride):
        downsample = None
        if stride != 1 or in_channels != out_channels:
            downsample = nn.Sequential(
                nn.Conv2d(in_channels, out_channels, 1, stride, bias=False),
                nn.BatchNorm2d(out_channels)
            )
        layers = [ResidualBlock(in_channels, out_channels, stride, downsample)]
        for _ in range(1, num_blocks):
            layers.append(ResidualBlock(out_channels, out_channels))
        return nn.Sequential(*layers)

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                nn.init.normal_(m.weight, 0, 0.01)
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = F.relu(self.bn1(self.conv1(x)))
        x = self.maxpool(x)
        x = self.stage1(x)
        x = self.stage2(x)
        x = self.stage3(x)
        x = self.stage4(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        return self.fc(x)

NUM_EPOCHS = 7
LEARNING_RATE = 0.01
NUM_CLASSES = 5

# Inisialisasi model, loss, optimizer
model = ResNet34(num_classes=NUM_CLASSES).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=LEARNING_RATE, momentum=0.9, weight_decay=1e-4)

# History untuk logging
history = {
    'train_loss': [], 'train_acc': [],
    'val_loss': [], 'val_acc': []
}

print("üß† Mulai pelatihan ResNet-34 dengan residual connection...")

for epoch in range(NUM_EPOCHS):
    # --- Training ---
    model.train()
    train_loss, train_correct, train_total = 0.0, 0, 0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        train_loss += loss.item() * inputs.size(0)
        _, predicted = torch.max(outputs, 1)
        train_total += labels.size(0)
        train_correct += (predicted == labels).sum().item()

    # --- Validation ---
    model.eval()
    val_loss, val_correct, val_total = 0.0, 0, 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            val_loss += loss.item() * inputs.size(0)
            _, predicted = torch.max(outputs, 1)
            val_total += labels.size(0)
            val_correct += (predicted == labels).sum().item()

    # Hitung metrik
    train_acc = train_correct / train_total
    val_acc = val_correct / val_total
    train_loss /= train_total
    val_loss /= val_total

    # Simpan ke history
    history['train_loss'].append(train_loss)
    history['train_acc'].append(train_acc)
    history['val_loss'].append(val_loss)
    history['val_acc'].append(val_acc)

    print(f"Epoch {epoch+1}/{NUM_EPOCHS} | "
          f"Train Acc: {train_acc:.4f}, Loss: {train_loss:.4f} | "
          f"Val Acc: {val_acc:.4f}, Loss: {val_loss:.4f}")

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history['train_loss'], label='Train Loss')
plt.plot(history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history['train_acc'], label='Train Acc')
plt.plot(history['val_acc'], label='Val Acc')
plt.title('Accuracy')
plt.legend()

plt.tight_layout()
plt.savefig('/content/resnet34_training_curve.png')
print("‚úÖ Plot disimpan: /content/resnet34_training_curve.png")

# Simpan metrik akhir
final_metrics = {
    'train_acc': history['train_acc'][-1],
    'val_acc': history['val_acc'][-1],
    'train_loss': history['train_loss'][-1],
    'val_loss': history['val_loss'][-1]
}
print("\nüéØ METRIK AKHIR:")
for k, v in final_metrics.items():
    print(f"  {k}: {v:.4f}")

# Opsional: simpan ke file
import json
with open('/content/resnet34_metrics.json', 'w') as f:
    json.dump(final_metrics, f, indent=4)
print("üìù Metrik disimpan ke: /content/resnet34_metrics.json")